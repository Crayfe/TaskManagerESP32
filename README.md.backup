# Task Manager ESP32

Sistema de gesti√≥n de tareas programables basado en ESP32 con pantalla OLED, tarjeta SD y perif√©ricos de control. Dise√±ado para automatizaciones en el hogar, proyectos de cultivo inteligente o cualquier sistema que requiera tareas programadas con flexibilidad y precisi√≥n.

---

## Caracter√≠sticas destacadas

- üìÖ **Programaci√≥n de tareas desde archivo SD**
- üß† **Tipos de tareas personalizadas**: motor, sensor, alarma...
- üåê **Sincronizaci√≥n horaria v√≠a NTP**
- üìü **Pantalla OLED integrada** con visualizaci√≥n en tiempo real
- üß∞ **Expansible y modular**: c√≥digo pensado para escalar
- üîß **WiFi configurable sin reprogramar**, leyendo credenciales desde la SD
- üå°Ô∏è **Lectura de sensor DHT22** para temperatura y humedad
- üì¢ **Alarmas ac√∫sticas** mediante zumbador (piezoel√©ctrico)

---

## ‚öôÔ∏è Hardware necesario
Para el desarrollo de este proyecto se est√° utilizando una placa de desarrollo casera donde se integra la mayor parte del hardware. Entre todo suma:
- ESP32
- Pantalla OLED I2C (128x64, SSD1306)
- M√≥dulo lector de tarjeta microSD
- Sensor DHT22
- Piezoel√©ctrico
- Montaje Darlington con transistor TIP120 para controlar motores o bombas (pin 17)
- Encoder rotativo y pulsadores

---

## üóÇÔ∏è Estructura de archivos en tarjeta SD

### `wifi_config.txt`
Este archivo permite almacenar y cambiar una red WiFi sin necesidad de reprogramar el ESP32.

Estructura:
```txt
ssid=TU_SSID
password=TU_PASSWORD
```


### `tasks.txt`
Este archivo permite almacenar tareas que luego el software es capaz de parsear y ejecutar, pudiendo editar y a√±adir las tareas que se deseen.

El formato de las tareas es el siguiente:
```
LABEL;TYPE;ENABLED;DD-MM-YYYY;HH:MM;REPEAT_SEC;[EXTRA_PARAMS]
```

#### Campos comunes

- LABEL:	Nombre de la tarea
- TYPE	Tipo: motor, alarm, sensor
- ENABLED	true o false
- DD-MM-YYYY	Fecha de ejecuci√≥n
- HH:MM	Hora de ejecuci√≥n
- REPEAT_SEC	Intervalo de repetici√≥n en segundos (0 = √∫nica vez)

#### Par√°metros adicionales por tipo [EXTRA_PARAMS]
- motor: duraci√≥n en segundos
- alarm: duraci√≥n del sonido en segundos
- sensor: sin par√°metros adicionales

#### Ejemplo:
```
Riego diario;motor;true;10-06-2025;08:00;86400;15
Alarma matutina;alarm;true;11-06-2025;07:30;86400;3
Medici√≥n temp;sensor;true;10-06-2025;09:00;3600
```

---

## üß† L√≥gica de funcionamiento
1. Al iniciar, el sistema:
	- Carga credenciales WiFi desde la SD.
	- Se conecta y sincroniza la hora por NTP.
	- Carga las tareas programadas desde tasks.txt.
2. Cada segundo que pasa:
	- Verifica si hay tareas pendientes de ejecutar.
	- Ejecuta la tarea cuando corresponde.
	- La reprograma si es peri√≥dica
	- Actualiza la pantalla OLED

---

### üñ•Ô∏è Visualizaci√≥n OLED
La pantalla muestra:
- Hora actual (sincronizada por NTP).
- Las pr√≥ximas 2 tareas programadas (no entran m√°s).
- Durante la ejecuci√≥n de una tarea se muestra el label de la tarea que se est√° ejecutando.

---

## üõ†Ô∏è ¬øFuturas mejoras?
- Mejorar la implementaci√≥n de diferentes tareas.
- Interfaz para modificar tareas desde el propio ESP32 con un men√∫ interactivo mostrable en la OLED y controlado con un encoder rotativo.
- Habilitar un servidor web para hacer una configuraci√≥n de tareas remota.
- Dividir el c√≥digo del proyecto en m√∫ltiples archivos (.h / .cpp) para mejorar el mantenimiento del c√≥digo.
- Log de ejecuciones y de cambios de estado en SD.
- Sustituir o complementar NTP con un RTC.
- Gesti√≥n de energ√≠a con bater√≠as externas y aprovechar el modo deep sleep del ESP32.

